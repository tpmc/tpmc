#!/usr/bin/env python
"""This script generates the lookup tables for the marching-cubes 33
algorithm """

import sys
import os
import time

sys.path.append(os.path.dirname(sys.argv[0]))

from lutgen.dunecode import DuneCode
from lutgen.vtk import Vtk
from lutgen.test import Test
from lutgen.base_case_triangulation import LookupGenerators

################################################################################
## 3D Cube                                                                    ##
################################################################################
cube3d = LookupGenerators[(3,"cube")]

################################################################################
## 3D Simplex                                                                 ##
################################################################################
simplex3d = LookupGenerators[(3,"simplex")]

################################################################################
## 2D Cube                                                                    ##
################################################################################
cube2d = LookupGenerators[(2,"cube")]

################################################################################
## 2D Simplex                                                                 ##
################################################################################
simplex2d = LookupGenerators[(2,"simplex")]

################################################################################
## 1D Cube                                                                    ##
################################################################################
lut1d = LookupGenerators[(1,"any")]

################################################################################
## 0D Cube                                                                    ##
################################################################################
lut0d = LookupGenerators[(0,"any")]

################################################################################
## Output                                                                     ##
################################################################################

#print """namespace Dune {
#
#    namespace MarchingInternal {
#"""

ccfile = open("marchinglut.cc", "w")
ccfile.write("""
    /*
     * This file is autogenerated using generate_lut.py
     *
     * Don't edit this file!
     */

#include "marchinglut.hh"

extern \"C\" {

""")

#DuneCode(lut0d).write(ccfile)
#DuneCode(lut1d).write(ccfile)
DuneCode(simplex2d).write(ccfile)
DuneCode(cube2d).write(ccfile)
DuneCode(simplex3d).write(ccfile)
DuneCode(cube3d).write(ccfile)

ccfile.write("}\n")
ccfile.close()

## generators = {
##     (1, "any"): lut1d,
## 	(2, "simplex"): simplex2d,
## 	(2, "cube"): cube2d,
## 	(3, "simplex"): simplex3d,
## #	(3, "prism"): prism3d,
## #	(3, "pyramid"): pyramid3d,
## 	(3, "cube"): cube3d
## 	}

#Consistency(generators).check(3, "simplex")
# Consistency(generators).check(3, "cube")

#Sk(cube3d).write("lutgen/sk")
#Sk(simplex3d).write("lutgen/sk")

Vtk(cube3d).write("lutgen/vtk")
Vtk(cube2d).write("lutgen/vtk")
Vtk(simplex2d).write("lutgen/vtk")
Vtk(simplex3d).write("lutgen/vtk")

start = time.time()
Test(cube2d, True).test()
print 'Time elapsed: ', time.time()-start,'s'
start = time.time()
Test(cube3d, True).test()
print 'Time elapsed: ', time.time()-start,'s'
start = time.time()
Test(simplex2d, True).test()
print 'Time elapsed: ', time.time()-start,'s'
start = time.time()
Test(simplex3d, True).test()
print 'Time elapsed: ', time.time()-start,'s'
