// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:

/*
 * This file is autogenerated using generate_lut.py
 *
 * Don't edit this file!
 */

#include "marchinglut.hh"

extern "C" {

  short table_simplex3d_cases_offsets[][5] = {
    /* vv: vertex values with 0=in, 1=out
     * cn: case number
     * bc: basic case, if negative it's inverted
     * c1: element count of co-dimension 1 elements
     * o1: table offset for co-dimension 1
     * c0: element count of co-dimension 0 elements
     * o0: table offset for co-dimension 0
     * uniq: whether the case is ambiguous for MC33 */
    /* vv / cn / bc / c0, o0, c1, o1, uniq */
    /* (0, 0, 0, 0) / 0 */ {0, 1, 0, 0, 0},
    /* (1, 0, 0, 0) / 1 */ {5, 1, 0, 1, 0},
    /* (0, 1, 0, 0) / 1 */ {12, 1, 4, 1, 0},
    /* (1, 1, 0, 0) / 2 */ {19, 1, 8, 1, 0},
    /* (0, 0, 1, 0) / 1 */ {26, 1, 13, 1, 0},
    /* (1, 0, 1, 0) / 2 */ {33, 1, 17, 1, 0},
    /* (0, 1, 1, 0) / 2 */ {40, 1, 22, 1, 0},
    /* (1, 1, 1, 0) / 3 */ {47, 1, 27, 1, 0},
    /* (0, 0, 0, 1) / 1 */ {52, 1, 31, 1, 0},
    /* (1, 0, 0, 1) / 2 */ {59, 1, 35, 1, 0},
    /* (0, 1, 0, 1) / 2 */ {66, 1, 40, 1, 0},
    /* (1, 1, 0, 1) / 3 */ {73, 1, 45, 1, 0},
    /* (0, 0, 1, 1) / 2 */ {78, 1, 49, 1, 0},
    /* (1, 0, 1, 1) / 3 */ {85, 1, 54, 1, 0},
    /* (0, 1, 1, 1) / 3 */ {90, 1, 58, 1, 0},
    /* (1, 1, 1, 1) / 4 */ {95, 0, 62, 0, 0},
  };


  short table_simplex3d_codim_0[] = {
    /* cn: case number
     * bc: basic case, if negative it's inverted
     * el: elements specified by number of vertices
     * cp: current position in array = offset */
    /* cn / bc / el / cp */
    /* (0, 0, 0, 0) / 0 / 4 / 0 */ 4, VA, VB, VC, VE,
    /* (1, 0, 0, 0) / 1 / 6 / 5 */ 6, EJ, EL, EN, VB, VC, VE,
    /* (0, 1, 0, 0) / 1 / 6 / 12 */ 6, EJ, EW, EV, VA, VE, VC,
    /* (1, 1, 0, 0) / 2 / 6 / 19 */ 6, EL, EV, VC, EN, EW, VE,
    /* (0, 0, 1, 0) / 1 / 6 / 26 */ 6, EL, EV, EX, VA, VB, VE,
    /* (1, 0, 1, 0) / 2 / 6 / 33 */ 6, EV, EJ, VB, EX, EN, VE,
    /* (0, 1, 1, 0) / 2 / 6 / 40 */ 6, EJ, EL, VA, EW, EX, VE,
    /* (1, 1, 1, 0) / 3 / 4 / 47 */ 4, EN, EW, EX, VE,
    /* (0, 0, 0, 1) / 1 / 6 / 52 */ 6, EN, EX, EW, VA, VC, VB,
    /* (1, 0, 0, 1) / 2 / 6 / 59 */ 6, EX, EL, VC, EW, EJ, VB,
    /* (0, 1, 0, 1) / 2 / 6 / 66 */ 6, EV, EX, VC, EJ, EN, VA,
    /* (1, 1, 0, 1) / 3 / 4 / 73 */ 4, EV, EL, EX, VC,
    /* (0, 0, 1, 1) / 2 / 6 / 78 */ 6, EW, EV, VB, EN, EL, VA,
    /* (1, 0, 1, 1) / 3 / 4 / 85 */ 4, EW, EJ, EV, VB,
    /* (0, 1, 1, 1) / 3 / 4 / 90 */ 4, EN, EL, EJ, VA,
    /* (1, 1, 1, 1) / 4 /  / 95 */  /* no elements */
  };


  short table_simplex3d_codim_1[] = {
    /* cn: case number
     * bc: basic case, if negative it's inverted
     * el: elements specified by number of vertices
     * cp: current position in array = offset */
    /* cn / bc / el / cp */
    /* (0, 0, 0, 0) / 0 /  / 0 */  /* no elements */
    /* (1, 0, 0, 0) / 1 / 3 / 0 */ 3, EL, EJ, EN,
    /* (0, 1, 0, 0) / 1 / 3 / 4 */ 3, EW, EJ, EV,
    /* (1, 1, 0, 0) / 2 / 4 / 8 */ 4, EL, EV, EN, EW,
    /* (0, 0, 1, 0) / 1 / 3 / 13 */ 3, EV, EL, EX,
    /* (1, 0, 1, 0) / 2 / 4 / 17 */ 4, EV, EJ, EX, EN,
    /* (0, 1, 1, 0) / 2 / 4 / 22 */ 4, EJ, EL, EW, EX,
    /* (1, 1, 1, 0) / 3 / 3 / 27 */ 3, EW, EN, EX,
    /* (0, 0, 0, 1) / 1 / 3 / 31 */ 3, EX, EN, EW,
    /* (1, 0, 0, 1) / 2 / 4 / 35 */ 4, EX, EL, EW, EJ,
    /* (0, 1, 0, 1) / 2 / 4 / 40 */ 4, EV, EX, EJ, EN,
    /* (1, 1, 0, 1) / 3 / 3 / 45 */ 3, EL, EV, EX,
    /* (0, 0, 1, 1) / 2 / 4 / 49 */ 4, EW, EV, EN, EL,
    /* (1, 0, 1, 1) / 3 / 3 / 54 */ 3, EJ, EW, EV,
    /* (0, 1, 1, 1) / 3 / 3 / 58 */ 3, EL, EN, EJ,
    /* (1, 1, 1, 1) / 4 /  / 62 */  /* no elements */
  };


  short table_cube2d_cases_offsets[][5] = {
    /* vv: vertex values with 0=in, 1=out
     * cn: case number
     * bc: basic case, if negative it's inverted
     * c1: element count of co-dimension 1 elements
     * o1: table offset for co-dimension 1
     * c0: element count of co-dimension 0 elements
     * o0: table offset for co-dimension 0
     * uniq: whether the case is ambiguous for MC33 */
    /* vv / cn / bc / c0, o0, c1, o1, uniq */
    /* (0, 0, 0, 0) / 0 */ {0, 1, 0, 0, 0},
    /* (1, 0, 0, 0) / 1 */ {5, 3, 0, 1, 0},
    /* (0, 1, 0, 0) / 1 */ {17, 3, 3, 1, 0},
    /* (1, 1, 0, 0) / 2 */ {29, 1, 6, 1, 0},
    /* (0, 0, 1, 0) / 1 */ {34, 3, 9, 1, 0},
    /* (1, 0, 1, 0) / 2 */ {46, 1, 12, 1, 0},
    /* (0, 1, 1, 0) / 3 */ {51, 2, 15, 2, 1},
    /* (1, 1, 1, 0) / 4 */ {61, 1, 21, 1, 0},
    /* (0, 0, 0, 1) / 1 */ {65, 3, 24, 1, 0},
    /* (1, 0, 0, 1) / 3 */ {77, 2, 27, 2, 1},
    /* (0, 1, 0, 1) / 2 */ {87, 1, 33, 1, 0},
    /* (1, 1, 0, 1) / 4 */ {92, 1, 36, 1, 0},
    /* (0, 0, 1, 1) / 2 */ {96, 1, 39, 1, 0},
    /* (1, 0, 1, 1) / 4 */ {101, 1, 42, 1, 0},
    /* (0, 1, 1, 1) / 4 */ {105, 1, 45, 1, 0},
    /* (1, 1, 1, 1) / 5 */ {109, 0, 48, 0, 0},
    /* MC 33 cases follow */
    /* 3 test index:3 */ {109, 2, 48, 2, 0},
    /* 3 test index:3 */ {117, 2, 54, 2, 0},
  };


  short table_cube2d_codim_0[] = {
    /* cn: case number
     * bc: basic case, if negative it's inverted
     * el: elements specified by number of vertices
     * cp: current position in array = offset */
    /* cn / bc / el / cp */
    /* (0, 0, 0, 0) / 0 / 4 / 0 */ 4, VA, VB, VC, VD,
    /* (1, 0, 0, 0) / 1 / 3, 3, 3 / 5 */ 3, VD, VC, EL, 3, VD, EL, EJ, 3, VD, EJ, VB,
    /* (0, 1, 0, 0) / 1 / 3, 3, 3 / 17 */ 3, VC, VA, EJ, 3, VC, EJ, EM, 3, VC, EM, VD,
    /* (1, 1, 0, 0) / 2 / 4 / 29 */ 4, EL, EM, VC, VD,
    /* (0, 0, 1, 0) / 1 / 3, 3, 3 / 34 */ 3, VB, VD, EK, 3, VB, EK, EL, 3, VB, EL, VA,
    /* (1, 0, 1, 0) / 2 / 4 / 46 */ 4, EK, EJ, VD, VB,
    /* (0, 1, 1, 0) / 3 / 4, 4 / 51 */ 4, VA, VD, EL, EK, 4, EJ, EM, VA, VD,
    /* (1, 1, 1, 0) / 4 / 3 / 61 */ 3, VD, EK, EM,
    /* (0, 0, 0, 1) / 1 / 3, 3, 3 / 65 */ 3, VA, VB, EM, 3, VA, EM, EK, 3, VA, EK, VC,
    /* (1, 0, 0, 1) / 3 / 4, 4 / 77 */ 4, VB, VC, EJ, EL, 4, EM, EK, VB, VC,
    /* (0, 1, 0, 1) / 2 / 4 / 87 */ 4, EJ, EK, VA, VC,
    /* (1, 1, 0, 1) / 4 / 3 / 92 */ 3, VC, EL, EK,
    /* (0, 0, 1, 1) / 2 / 4 / 96 */ 4, EM, EL, VB, VA,
    /* (1, 0, 1, 1) / 4 / 3 / 101 */ 3, VB, EM, EJ,
    /* (0, 1, 1, 1) / 4 / 3 / 105 */ 3, VA, EJ, EL,
    /* (1, 1, 1, 1) / 5 /  / 109 */  /* no elements */
    /* (0, 1, 1, 0) / 3 / 3, 3 / 109 */ 3, VC, EK, EL, 3, VB, EM, EJ,
    /* (1, 0, 0, 1) / 3 / 3, 3 / 117 */ 3, VA, EL, EJ, 3, VD, EK, EM,
  };


  short table_cube2d_codim_1[] = {
    /* cn: case number
     * bc: basic case, if negative it's inverted
     * el: elements specified by number of vertices
     * cp: current position in array = offset */
    /* cn / bc / el / cp */
    /* (0, 0, 0, 0) / 0 /  / 0 */  /* no elements */
    /* (1, 0, 0, 0) / 1 / 2 / 0 */ 2, EJ, EL,
    /* (0, 1, 0, 0) / 1 / 2 / 3 */ 2, EM, EJ,
    /* (1, 1, 0, 0) / 2 / 2 / 6 */ 2, EM, EL,
    /* (0, 0, 1, 0) / 1 / 2 / 9 */ 2, EL, EK,
    /* (1, 0, 1, 0) / 2 / 2 / 12 */ 2, EJ, EK,
    /* (0, 1, 1, 0) / 3 / 2, 2 / 15 */ 2, EJ, EM, 2, EL, EK,
    /* (1, 1, 1, 0) / 4 / 2 / 21 */ 2, EK, EM,
    /* (0, 0, 0, 1) / 1 / 2 / 24 */ 2, EK, EM,
    /* (1, 0, 0, 1) / 3 / 2, 2 / 27 */ 2, EM, EK, 2, EJ, EL,
    /* (0, 1, 0, 1) / 2 / 2 / 33 */ 2, EK, EJ,
    /* (1, 1, 0, 1) / 4 / 2 / 36 */ 2, EL, EK,
    /* (0, 0, 1, 1) / 2 / 2 / 39 */ 2, EL, EM,
    /* (1, 0, 1, 1) / 4 / 2 / 42 */ 2, EM, EJ,
    /* (0, 1, 1, 1) / 4 / 2 / 45 */ 2, EJ, EL,
    /* (1, 1, 1, 1) / 5 /  / 48 */  /* no elements */
    /* (0, 1, 1, 0) / 3 / 2, 2 / 48 */ 2, EM, EJ, 2, EK, EL,
    /* (1, 0, 0, 1) / 3 / 2, 2 / 54 */ 2, EK, EM, 2, EL, EJ,
  };


  short table_cube2d_mc33_offsets[] = {
    /* (0, 0, 0, 0) / 0 */ 255,
    /* (1, 0, 0, 0) / 1 */ 255,
    /* (0, 1, 0, 0) / 2 */ 255,
    /* (1, 1, 0, 0) / 3 */ 255,
    /* (0, 0, 1, 0) / 4 */ 255,
    /* (1, 0, 1, 0) / 5 */ 255,
    /* (0, 1, 1, 0) / 6 */ 0,
    /* (1, 1, 1, 0) / 7 */ 255,
    /* (0, 0, 0, 1) / 8 */ 255,
    /* (1, 0, 0, 1) / 9 */ 3,
    /* (0, 1, 0, 1) / 10 */ 255,
    /* (1, 1, 0, 1) / 11 */ 255,
    /* (0, 0, 1, 1) / 12 */ 255,
    /* (1, 0, 1, 1) / 13 */ 255,
    /* (0, 1, 1, 1) / 14 */ 255,
    /* (1, 1, 1, 1) / 15 */ 255,
  };


  short table_cube2d_mc33_face_test_order[] = {
    /* dummy entry/not used but the index has to start with 1*/
    1,

    -1,
    CASE_IS_REGULAR, 16,

    -1,
    CASE_IS_REGULAR, 17,

  };


  short table_simplex2d_cases_offsets[][5] = {
    /* vv: vertex values with 0=in, 1=out
     * cn: case number
     * bc: basic case, if negative it's inverted
     * c1: element count of co-dimension 1 elements
     * o1: table offset for co-dimension 1
     * c0: element count of co-dimension 0 elements
     * o0: table offset for co-dimension 0
     * uniq: whether the case is ambiguous for MC33 */
    /* vv / cn / bc / c0, o0, c1, o1, uniq */
    /* (0, 0, 0) / 0 */ {0, 1, 0, 0, 0},
    /* (1, 0, 0) / 1 */ {4, 1, 0, 1, 0},
    /* (0, 1, 0) / 1 */ {9, 1, 3, 1, 0},
    /* (1, 1, 0) / 2 */ {14, 1, 6, 1, 0},
    /* (0, 0, 1) / 1 */ {18, 1, 9, 1, 0},
    /* (1, 0, 1) / 2 */ {23, 1, 12, 1, 0},
    /* (0, 1, 1) / 2 */ {27, 1, 15, 1, 0},
    /* (1, 1, 1) / 3 */ {31, 0, 18, 0, 0},
  };


  short table_simplex2d_codim_0[] = {
    /* cn: case number
     * bc: basic case, if negative it's inverted
     * el: elements specified by number of vertices
     * cp: current position in array = offset */
    /* cn / bc / el / cp */
    /* (0, 0, 0) / 0 / 3 / 0 */ 3, VA, VB, VC,
    /* (1, 0, 0) / 1 / 4 / 4 */ 4, EL, EJ, VC, VB,
    /* (0, 1, 0) / 1 / 4 / 9 */ 4, EJ, EV, VA, VC,
    /* (1, 1, 0) / 2 / 3 / 14 */ 3, EL, EV, VC,
    /* (0, 0, 1) / 1 / 4 / 18 */ 4, EV, EL, VB, VA,
    /* (1, 0, 1) / 2 / 3 / 23 */ 3, EV, EJ, VB,
    /* (0, 1, 1) / 2 / 3 / 27 */ 3, EJ, EL, VA,
    /* (1, 1, 1) / 3 /  / 31 */  /* no elements */
  };


  short table_simplex2d_codim_1[] = {
    /* cn: case number
     * bc: basic case, if negative it's inverted
     * el: elements specified by number of vertices
     * cp: current position in array = offset */
    /* cn / bc / el / cp */
    /* (0, 0, 0) / 0 /  / 0 */  /* no elements */
    /* (1, 0, 0) / 1 / 2 / 0 */ 2, EJ, EL,
    /* (0, 1, 0) / 1 / 2 / 3 */ 2, EV, EJ,
    /* (1, 1, 0) / 2 / 2 / 6 */ 2, EL, EV,
    /* (0, 0, 1) / 1 / 2 / 9 */ 2, EL, EV,
    /* (1, 0, 1) / 2 / 2 / 12 */ 2, EV, EJ,
    /* (0, 1, 1) / 2 / 2 / 15 */ 2, EJ, EL,
    /* (1, 1, 1) / 3 /  / 18 */  /* no elements */
  };


}
